#!/bin/bash

#------------------------------------------------------------------------------
# Setup a Debian-based VPS for remote pair hacking:
#------------------------------------------------------------------------------

set -ex

USAGE="Usage: ${0##*/} <ip-address> <pair-user-id> [<admin-user-id>]"

die() { echo "$@" >&2; exit 1; }

if [ $# -lt 2 -o $# -gt 3 ] ||
   [[ ! "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    die "$USAGE"
fi

ip_address="$1"
pair_user="$2"
admin_user="${3:-$USER}"
setup_file_name='~/server-setup.bash'

#------------------------------------------------------------------------------
# Do the 'root' stuff first:
#------------------------------------------------------------------------------

# Set up ssh key for root. Needs root password:
cat ~/.ssh/id_rsa.pub | ssh root@$ip_address "cat > k; mkdir -p .ssh; chmod 700 .ssh; mv k .ssh/authorized_keys"

# Copy over pair's key if present
pair_key=${0%/bin/*}/pairs/$pair_user/id_rsa.pub
if [ -e $pair_key ]; then
  scp $pair_key root@$ip_address:pair_key
fi

# Copy over apt-get script:
scp apt-get root@$ip_address:

# Copy this setup script to root's $HOME.
cat <<... | ssh root@$ip_address "cat > $setup_file_name"
set -ex

# Remove this script:
rm $setup_file_name

# Install needed software:
bash ./apt-get

# Setup fish:
wget http://fishshell.com/files/2.0.0/linux/Ubuntu_12.10/x86_64/fish_2.0.0-201305151006_amd64.deb
dpkg -i fish_2.0.0-201305151006_amd64.deb

# Add users. sudo for $admin_user:
addgroup admin
adduser $admin_user
adduser $admin_user admin
# chsh -s /usr/bin/fish $admin_user

# Move the public key over to $admin_user's home:
mkdir -p /home/$admin_user/.ssh
chmod 700 /home/$admin_user/.ssh
cp ~/.ssh/authorized_keys /home/$admin_user/.ssh/
chown -R $admin_user:$admin_user /home/$admin_user/.ssh

if [ -f pair_key ]; then
  adduser --disabled-password $pair_user
  mkdir -p /home/$pair_user/.ssh
  chmod 700 /home/$pair_user/.ssh
  mv pair_key /home/$pair_user/.ssh/authorized_keys
  chown -R $pair_user:$pair_user /home/$pair_user/.ssh
else
  adduser $pair_user
fi

# TODO scramble root password
...

# Run the interactive root script:
ssh -t root@$ip_address bash $setup_file_name

#------------------------------------------------------------------------------
# Now do the 'admin_user' stuff:
#------------------------------------------------------------------------------

# Copy over files
scp conf... github-repos $admin_user@$ip_address:
if [ -f pairs/$admin_user/conf... ]; then
  cat pairs/$admin_user/conf... | ssh $admin_user@$ip_address "cat >> conf..."
fi
if [ -f pairs/$pair_user/conf... ]; then
  cat pairs/$pair_user/conf... | ssh $admin_user@$ip_address "cat >> conf..."
fi
if [ -f pairs/private/conf... ]; then
  cat pairs/private/conf... | ssh $admin_user@$ip_address "cat >> conf..."
fi

# Copy this setup script to $admin_user's $HOME.
cat <<... | ssh $admin_user@$ip_address "cat > $setup_file_name"
set -ex

# Remove this script:
rm $setup_file_name

# Get this repo remotely
git clone git@github.com:ingydotnet/pairup-bash

# Get other repos of interest
while read repo; do
  git clone git@github.com:\$repo src/\${repo#*/}
done < github-repos
rm github-repos

# Install ... dotfile management setup:
git clone git://github.com/ingydotnet/....git
mv conf... .../conf
.../... update
.../... install

# Make a little remote script called pairup. Run this first thing to get your
# bearings inside the VPS:
cat <<.... > ~/bin/pairup
chmod 777 /tmp/pairup
cat <<.....
Welcome to your new pairup VPS tmux session!
Tell your pair programmer these details:
ssh $pair_user@$ip_address
tmux -S /tmp/pairup attach
.....
....
chmod +x ~/bin/pairup

sudo ~/pairup-bash/bin/pairup-server-setup-more &> /tmp/pairup.log &

# Start tmux with a shared socket:
tmux -S /tmp/pairup
...

# Run the interactive admin_user script:
ssh -t $admin_user@$ip_address bash $setup_file_name

# Now you should be inside a perfectly working tmux session for pairing.
# Run the `pairup` command and it will tell you what your partner needs.
